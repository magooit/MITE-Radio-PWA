// service-worker.js

const CACHE_NAME = 'mite-radio-cache-v1';
const AUDIO_CACHE_NAME = 'mite-radio-audio-cache-v1';

// Files to cache at install
const assetsToCache = [
  './index.html',
  './manifest.json',
  './icon.png',
  './styles.css', // Add CSS if you have styles
  './scripts.js'  // Add JS if you have scripts
];

// Install event: Cache static assets
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll(assetsToCache);
    })
  );
});

// Fetch event: Handle requests for assets and audio files
self.addEventListener('fetch', (event) => {
  // Handle requests for audio files (streaming)
  if (event.request.url.endsWith('.mp3') || event.request.url.endsWith('.ogg')) {
    event.respondWith(handleAudioFetch(event));
  } else {
    // For other assets, use cache or fetch from network
    event.respondWith(handleCacheOrFetch(event));
  }
});

// Function to handle audio file fetch (cache audio files)
async function handleAudioFetch(event) {
  const audioCache = await caches.open(AUDIO_CACHE_NAME);
  
  try {
    const networkResponse = await fetch(event.request);
    // Cache the audio file after fetching it from the network
    if (networkResponse && networkResponse.ok) {
      audioCache.put(event.request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    // If network fails, serve from cache if available
    const cachedAudio = await audioCache.match(event.request);
    return cachedAudio || new Response('Audio not available', { status: 404 });
  }
}

// Function to handle cache or network fetch for static assets
async function handleCacheOrFetch(event) {
  const cache = await caches.open(CACHE_NAME);

  // Check if the request is cached, otherwise fetch from the network
  const cachedResponse = await cache.match(event.request);
  if (cachedResponse) {
    return cachedResponse; // Serve from cache
  }

  try {
    const networkResponse = await fetch(event.request);
    // Cache the network response for future use
    cache.put(event.request, networkResponse.clone());
    return networkResponse; // Serve fresh content
  } catch (error) {
    // If network fails, show fallback (useful for offline pages)
    return new Response('Network error occurred. Please check your connection.', {
      status: 503,
    });
  }
}

// Activate event: Clean up old caches
self.addEventListener('activate', (event) => {
  const cacheWhitelist = [CACHE_NAME, AUDIO_CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (!cacheWhitelist.includes(cacheName)) {
            return caches.delete(cacheName); // Delete outdated caches
          }
        })
      );
    })
  );
});
